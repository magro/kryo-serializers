plugins {
	id 'idea'
	id 'java-library'
	id 'maven-publish'
	id 'findbugs'
	id 'osgi'
	id 'com.diffplug.gradle.spotless' version '3.8.0'
	id 'com.github.ben-manes.versions' version '0.17.0'
	id 'com.google.protobuf' version "0.8.4"
	id 'net.saliman.cobertura' version '2.5.4'
	id 'com.github.kt3k.coveralls' version '2.8.2'
}

description = 'Additional Kryo serializers for standard JDK types (e.g. currency, JDK proxies) and some for external libs (e.g. joda time, cglib proxies, wicket)'

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

jar {
	manifest {
		(it as OsgiManifest).with {
			instruction 'Import-Package',
				'com.esotericsoftware.kryo*;version="[3.0.3,4.*)"',
				'com.esotericsoftware.minlog*;version="[1.2,2.0)"',
				'sun.reflect;resolution:=optional'
		}
	}
}

cobertura {
	coverageFormats = [
		'html',
		'xml'
	]
}

tasks.withType(FindBugs) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}

findbugs {
	effort = "max"
	reportLevel = "high"
	excludeFilter = file("findbugs-exclude.xml")
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allJava
	classifier 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	from javadoc.destinationDir
	classifier 'javadoc'

	// Add support for new doc tags
	(javadoc.options as CoreJavadocOptions).with {
		addMultilineStringsOption("tag").setValue([
			"apiNote:a:API Note:",
			"implSpec:a:Implementation Requirements:",
			"implNote:a:Implementation Note:"
		])
	}
}
sourceSets.main.java.srcDirs 'build/generated/source/proto/main/java'
sourceSets.test.java.srcDirs 'build/generated/source/proto/test/java'

compileJava {
	// Disable warnings about Sun classes (ReflectionFactory).
	options.compilerArgs += [
		"-XDignore.symbol.file",
		"-Xlint:unchecked"
	]
	options.fork = true
	options.forkOptions.executable = 'javac'
}

protobuf { protoc { artifact = 'com.google.protobuf:protoc:3.5.1-1' } }

publishing {
	publications {
		maven(MavenPublication) {
			(it as MavenPublication).with {
				from components['java']

				groupId 'de.javakaffee'
				artifactId 'kryo-serializers'
				version '0.43-SNAPSHOT'

				artifact sourcesJar
				artifact javadocJar
			}
		}
	}
}

test { useTestNG() }

repositories { jcenter() }

ext.optionalDependencies = [
	'com.google.protobuf:protobuf-java:3.5.1',
	'joda-time:joda-time:2.9.9',
	'cglib:cglib:3.2.6',
	'org.apache.wicket:wicket-core:8.0.0-M8',
	'com.google.guava:guava:21.0',
	'com.github.andrewoma.dexx:collection:0.7'
]

dependencies {
	api 'com.esotericsoftware:kryo:4.0.1'
	compileOnly optionalDependencies

	// Testing

	testImplementation 'org.testng:testng:6.14.1'
	testImplementation 'junit:junit:4.12'

	testImplementation optionalDependencies

	testImplementation 'javax.servlet:javax.servlet-api:4.0.0'
	testImplementation 'org.slf4j:slf4j-simple:1.8.0-beta1'
	testImplementation 'org.apache.commons:commons-lang3:3.7'
}

spotless {
	enforceCheck false
	java {
		it.with {
			licenseHeaderFile 'spotless.license'
			importOrderFile 'spotless.importorder'
			eclipse().configFile 'spotless.eclipseformat.xml'
			trimTrailingWhitespace()
			removeUnusedImports()
			endWithNewline()

			// Eclipse formatter removes whitespace in a for loop without an increment.
			// for(int i = 0; i < 10;)  // what Eclipse does
			// for(int i = 0; i < 10; ) // what I wish Eclipse did
			custom 'For loop fix', { it.replace(';)', '; )') }

			ignoreErrorForPath 'build/generated/source/proto/test/java/de/javakaffee/kryoserializers/protobuf/SampleProtoAOuterClass.java'
			ignoreErrorForPath 'build/generated/source/proto/test/java/de/javakaffee/kryoserializers/protobuf/SampleProtoBOuterClass.java'
			ignoreErrorForPath 'build\\generated\\source\\proto\\test\\java\\de\\javakaffee\\kryoserializers\\protobuf\\SampleProtoAOuterClass.java'
			ignoreErrorForPath 'build\\generated\\source\\proto\\test\\java\\de\\javakaffee\\kryoserializers\\protobuf\\SampleProtoBOuterClass.java'
		}
	}
	groovyGradle {
		it.with {
			greclipse().configFile('spotless.eclipseformat.xml', 'spotless.groovyformat.prefs')
		}
	}
	freshmark {
		it.with {
			target '**/*.md'
			propertiesFile('gradle.properties')
		}
	}
}

afterEvaluate {
	check.dependsOn(tasks['cobertura'])
}
